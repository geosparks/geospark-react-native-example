// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name GeoSpark
import AWSCore
import AWSIoT
import AWSMobileClient
import CommonCrypto
import CoreData
import CoreLocation
import CoreMotion
import CoreTelephony
import Foundation
@_exported import GeoSpark
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
@_hasMissingDesignatedInitializers @objc public class GeoSparkLocation : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String?
  @objc final public let activity: Swift.String?
  @objc final public let location: CoreLocation.CLLocation
  @objc final public let timezoneOffset: Swift.String?
  @objc final public let recordedAt: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTripOrigin : ObjectiveC.NSObject {
  @objc public var coordinates: [Swift.Double]!
  @objc public var createdAt: Swift.String!
  @objc public var id: Swift.String!
  @objc public var locType: Swift.String!
  @objc public var reached: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTripListener : ObjectiveC.NSObject {
  @objc final public let tripId: Swift.String
  @objc final public let speed: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let duration: Swift.Double
  @objc final public let startedTime: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkUser : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let userDescription: Swift.String?
  @objc public var geofenceEvents: Swift.Bool
  @objc public var eventsListener: Swift.Bool
  @objc public var locationListener: Swift.Bool
  @objc public var locationEvents: Swift.Bool
  @objc public var tripsEvents: Swift.Bool
  @objc public var nearbyEvents: Swift.Bool
  @objc final public let account_id: Swift.String
  @objc final public let project_id: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkGetTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var destinations: [GeoSpark.GeoSparkTripDestination]!
  @objc public var distanceCovered: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var events: [GeoSpark.GeoSparkTripEvent]!
  @objc public var tripId: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isPaused: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [GeoSpark.GeoSparkTripOrigin]!
  @objc public var projectId: Swift.String!
  @objc public var tripEndedAt: Swift.String!
  @objc public var tripStartedAt: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc public var userId: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class GeoSpark : ObjectiveC.NSObject {
  @objc public static var delegate: GeoSpark.GeoSparkDelegate! {
    @objc get
    @objc set(value)
  }
  @objc public static func initialize(_ publishKey: Swift.String, _ baseUrl: Swift.String? = nil, _ p12FilePath: Swift.String? = nil, _ iOTEndPoint: Swift.String? = nil, _ passPhrase: Swift.String? = nil, _ region: AWSCore.AWSRegionType = .Unknown)
  @objc public static func createUser(_ description: Swift.String, handler: GeoSpark.GeoSparkUserCompletionhandler? = nil)
  @objc public static func getUser(_ userId: Swift.String, handler: GeoSpark.GeoSparkUserCompletionhandler? = nil)
  @objc public static func setDescription(_ description: Swift.String)
  @objc public static func logoutUser(handler: GeoSpark.GeoSparkLogoutCompletionhandler? = nil)
  @objc public static func setDeviceToken(_ deviceToken: Foundation.Data)
  @objc public static func startTracking(_ trackingMethod: GeoSpark.GeoSparkTrackingMode, options: GeoSpark.GeoSparkTrackingCustomMethods? = nil)
  @objc public static func stopTracking()
  @objc public static func startSelfTracking(_ trackingMethod: GeoSpark.GeoSparkTrackingMode, options: GeoSpark.GeoSparkTrackingCustomMethods? = nil)
  @objc public static func stopSelfTracking()
  @objc public static func requestLocation()
  @objc public static func isLocationEnabled() -> Swift.Bool
  @objc public static func isLocationTracking() -> Swift.Bool
  @objc public static func locationPermissionStatus() -> Swift.Int
  @objc public static func getCurrentLocation(_ accuracy: Swift.Int, handler: GeoSpark.GeoSparkCurrentLocationCompletionhandler? = nil)
  @objc public static func updateCurrentLocation(_ accuracy: Swift.Int)
  @objc public static func startTrip(_ tripId: Swift.String, _ tripDesc: Swift.String? = nil, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func stopTrip(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func pauseTrip(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func resumeTrip(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func forceEndTrip(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func activeTrips(_ local: Swift.Bool, handler: GeoSpark.GeoSparkActiveTripsCompletionhandler? = nil)
  @objc public static func deleteTrip(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func syncTrip(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripCompletionhandler? = nil)
  @objc public static func createTrip(_ local: Swift.Bool, _ coordinate: Swift.Dictionary<Swift.String, Any>? = nil, handler: GeoSpark.GeoSparkCreateTripCompletionhandler? = nil)
  @objc public static func getTripDetails(_ tripId: Swift.String, handler: GeoSpark.GeoSparkGetTripCompletionhandler? = nil)
  @objc public static func getTripSummary(_ tripId: Swift.String, handler: GeoSpark.GeoSparkSummaryTripCompletionhandler? = nil)
  @objc public static func getTripStatus(_ tripId: Swift.String, handler: GeoSpark.GeoSparkTripListenerCompletionhandler? = nil)
  @objc public static func toggleEvents(Geofence: Swift.Bool, Trip: Swift.Bool, Location: Swift.Bool, MovingGeofence: Swift.Bool, handler: GeoSpark.GeoSparkUserCompletionhandler? = nil)
  @objc public static func toggleListener(Events: Swift.Bool, Locations: Swift.Bool, handler: GeoSpark.GeoSparkUserCompletionhandler? = nil)
  @objc public static func getEventsStatus(handler: GeoSpark.GeoSparkUserCompletionhandler? = nil)
  @objc public static func getListenerStatus(handler: GeoSpark.GeoSparkUserCompletionhandler? = nil)
  @objc public static func notificationOpenedHandler(_ resposne: UserNotifications.UNNotificationResponse)
  @objc public static func setLoggerEnabled(logger: Swift.Bool)
  @objc public static func subscribeTripStatus(_ tripId: Swift.String)
  @objc public static func unsubscribeTripStatus(_ tripId: Swift.String)
  @objc public static func setTrackingInAppState(_ state: GeoSpark.GeoSparkTrackingState)
  @objc public static func offlineLocationTracking(_ offlineTracking: Swift.Bool)
  @objc public static func enableAccuracyEngine()
  @objc public static func disableAccuracyEngine()
  @objc public static func publishSave(_ publish: GeoSpark.GeoSparkPublish? = nil)
  @objc public static func publishOnly(_ publish: GeoSpark.GeoSparkPublish? = nil)
  @objc public static func subscribe(_ type: GeoSpark.GeoSparkSubscribe, _ userId: Swift.String)
  @objc public static func unsubscribe(_ type: GeoSpark.GeoSparkSubscribe, _ userId: Swift.String)
  @objc public static func stopPublishing()
  @objc deinit
  @objc override dynamic public init()
}
public typealias GeoSparkUserCompletionhandler = ((GeoSpark.GeoSparkUser?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkLogoutCompletionhandler = ((Swift.String?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkCurrentLocationCompletionhandler = ((CoreLocation.CLLocation?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkTripCompletionhandler = ((Swift.String?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkActiveTripsCompletionhandler = (([GeoSpark.GeoSparkTrip]?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkCreateTripCompletionhandler = ((GeoSpark.GeoSparkCreateTrip?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkGetTripCompletionhandler = ((GeoSpark.GeoSparkGetTrip?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkSummaryTripCompletionhandler = ((GeoSpark.GeoSparkTripSummary?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkTripListenerCompletionhandler = ((GeoSpark.GeoSparkTripListener?, GeoSpark.GeoSparkError?) -> Swift.Void)
public typealias GeoSparkDeleteTripCompletionhandler = ((Swift.String?, GeoSpark.GeoSparkError?) -> Swift.Void)
@objc public enum LocationAccuracy : Swift.Int {
  case kCLLocationAccuracyBestForNavigation
  case kCLLocationAccuracyBest
  case kCLLocationAccuracyNearestTenMeters
  case kCLLocationAccuracyHundredMeters
  case kCLLocationAccuracyKilometer
  case kCLLocationAccuracyThreeKilometers
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class GeoSparkTrackingCustomMethods : ObjectiveC.NSObject {
  public static var sharedInstance: GeoSpark.GeoSparkTrackingCustomMethods
  public var desiredAccuracy: GeoSpark.LocationAccuracy?
  public var useVisits: Swift.Bool?
  public var showsBackgroundLocationIndicator: Swift.Bool?
  public var distanceFilter: CoreLocation.CLLocationDistance?
  public var useSignificant: Swift.Bool?
  public var useRegionMonitoring: Swift.Bool?
  public var useDynamicGeofencRadius: Swift.Bool?
  public var geofenceRadius: Swift.Int?
  public var allowBackgroundLocationUpdates: Swift.Bool?
  public var activityType: CoreLocation.CLActivityType?
  public var pausesLocationUpdatesAutomatically: Swift.Bool?
  public var useStandardLocationServices: Swift.Bool?
  public var accuracyFilter: Swift.Int?
  public var updateInterval: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTripDestination : ObjectiveC.NSObject {
  @objc public var coordinates: [Swift.Double]!
  @objc public var createdAt: Swift.String!
  @objc public var id: Swift.String!
  @objc public var locType: Swift.String!
  @objc public var reached: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTripSummary : ObjectiveC.NSObject {
  @objc public var distanceCovered: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var projectId: Swift.String!
  @objc public var route: [GeoSpark.GeoSparkTripSummaryRoute]!
  @objc public var tripId: Swift.String!
  @objc public var tripStatus: Swift.String!
  @objc public var userId: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTripEvent : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var eventType: Swift.String!
  @objc public var id: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var userId: Swift.String!
  @objc public var userLocationId: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkCreateTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var destinations: [GeoSpark.GeoSparkTripDestination]!
  @objc public var tripId: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [GeoSpark.GeoSparkTripOrigin]!
  @objc public var tripTrackingUrl: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc public var userId: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTripSummaryRoute : ObjectiveC.NSObject {
  @objc public var activity: Swift.String!
  @objc public var altitude: Foundation.NSNumber!
  @objc public var coordinates: [Swift.Double]!
  @objc public var recordedAt: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkTrip : ObjectiveC.NSObject {
  @objc public var tripId: Swift.String!
  @objc public var deleted: Swift.Bool
  @objc public var ended: Swift.Bool
  @objc public var started: Swift.Bool
  @objc public var paused: Swift.Bool
  @objc public var updatedAt: Swift.String!
  @objc public var createdAt: Swift.String!
  @objc public var syncStatus: Swift.String!
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum GeoSparkTrackingMode : Swift.Int {
  case passive = 0
  case balanced
  case active
  case custom
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GeoSparkTrackingState : Swift.Int {
  case AlwaysOn = 0
  case Foreground
  case Background
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GeoSparkSubscribe : Swift.Int {
  case Both
  case Location
  case Events
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol GeoSparkDelegate {
  @objc func didUpdateLocation(_ location: GeoSpark.GeoSparkLocation)
  @objc optional func didReceiveEvents(_ events: GeoSpark.GeoSparkEvents)
  @objc optional func didReceiveUserLocation(_ location: GeoSpark.GeoSparkLocationReceived)
  @objc optional func didReceiveTripStatus(_ tripStatus: GeoSpark.TripStatusListener)
  @objc optional func onError(_ error: GeoSpark.GeoSparkError)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static var reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (GeoSpark.Reachability) -> ()
  public typealias NetworkUnreachable = (GeoSpark.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: GeoSpark.Reachability.NetworkStatus, b: GeoSpark.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: GeoSpark.Reachability.Connection, b: GeoSpark.Reachability.Connection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: GeoSpark.Reachability.NetworkReachable?
  public var whenUnreachable: GeoSpark.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: GeoSpark.Reachability.Connection {
    get
  }
  public var connection: GeoSpark.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  public convenience init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  public convenience init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class GeoSparkPublish : ObjectiveC.NSObject {
  @objc public var meta_data: Swift.Dictionary<Swift.String, Any>?
  @objc public var user_id: Swift.Bool
  @objc public var app_id: Swift.Bool
  @objc public var recorded_at: Swift.Bool
  @objc public var tz_offset: Swift.Bool
  @objc public var geofence_events: Swift.Bool
  @objc public var trips_events: Swift.Bool
  @objc public var location_events: Swift.Bool
  @objc public var nearby_events: Swift.Bool
  @objc public var location_listener: Swift.Bool
  @objc public var event_listener: Swift.Bool
  @objc public var app_context: Swift.Bool
  @objc public var network_status: Swift.Bool
  @objc public var gps_status: Swift.Bool
  @objc public var location_permission: Swift.Bool
  @objc public var battery_status: Swift.Bool
  @objc public var airplane_mode: Swift.Bool
  @objc public var battery_saver: Swift.Bool
  @objc public var battery_remaining: Swift.Bool
  @objc public var device_model: Swift.Bool
  @objc public var device_manufacturer: Swift.Bool
  @objc public var os_version: Swift.Bool
  @objc public var tracking_mode: Swift.Bool
  @objc public var altitude: Swift.Bool
  @objc public var speed: Swift.Bool
  @objc public var vertical_accuracy: Swift.Bool
  @objc public var horizontal_accuracy: Swift.Bool
  @objc public var course: Swift.Bool
  @objc public var activity: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkEvents : ObjectiveC.NSObject {
  @objc public var activity: Swift.String?
  @objc public var altitude: Foundation.NSNumber
  @objc public var course: Foundation.NSNumber
  @objc public var createdAt: Swift.String?
  @objc public var distance: Foundation.NSNumber
  @objc public var eventSource: Swift.String?
  @objc public var eventType: Swift.String?
  @objc public var eventVersion: Swift.String?
  @objc public var geofenceId: Swift.String?
  @objc public var horizontalAccuracy: Foundation.NSNumber
  @objc public var coordinates: [Swift.Double]?
  @objc public var locationId: Swift.String?
  @objc public var nearbyUserId: Swift.String?
  @objc public var recordedAt: Swift.String?
  @objc public var speed: Foundation.NSNumber
  @objc public var tripId: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var veritcalAccuracy: Foundation.NSNumber
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TripStatusListener : ObjectiveC.NSObject {
  @objc final public let tripId: Swift.String
  @objc final public let speed: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let duration: Swift.Double
  @objc final public let startedTime: Swift.String
  @objc final public let pace: Swift.Double
  @objc final public let latitude: Swift.Double
  @objc final public let longitude: Swift.Double
  @objc deinit
  @objc override dynamic public init()
}
public enum Model : Swift.String {
  case simulator
  case iPod1
  case iPod2
  case iPod3
  case iPod4
  case iPod5
  case iPod6
  case iPod7
  case iPad2
  case iPad3
  case iPad4
  case iPadAir
  case iPadAir2
  case iPadAir3
  case iPadAir4
  case iPad5
  case iPad6
  case iPad7
  case iPad8
  case iPadMini
  case iPadMini2
  case iPadMini3
  case iPadMini4
  case iPadMini5
  case iPadPro9_7
  case iPadPro10_5
  case iPadPro11
  case iPadPro2_11
  case iPadPro12_9
  case iPadPro2_12_9
  case iPadPro3_12_9
  case iPadPro4_12_9
  case iPhone4
  case iPhone4S
  case iPhone5
  case iPhone5S
  case iPhone5C
  case iPhone6
  case iPhone6Plus
  case iPhone6S
  case iPhone6SPlus
  case iPhoneSE
  case iPhone7
  case iPhone7Plus
  case iPhone8
  case iPhone8Plus
  case iPhoneX
  case iPhoneXS
  case iPhoneXSMax
  case iPhoneXR
  case iPhone11
  case iPhone11Pro
  case iPhone11ProMax
  case iPhoneSE2
  case iPhone12Mini
  case iPhone12
  case iPhone12Pro
  case iPhone12ProMax
  case AppleWatch1
  case AppleWatchS1
  case AppleWatchS2
  case AppleWatchS3
  case AppleWatchS4
  case AppleWatchS5
  case AppleWatchSE
  case AppleWatchS6
  case AppleTV1
  case AppleTV2
  case AppleTV3
  case AppleTV4
  case AppleTV_4K
  case unrecognized
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIDevice {
  public var type: GeoSpark.Model {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkLocationReceived : ObjectiveC.NSObject {
  @objc public var activity: Swift.String!
  @objc public var altitude: Foundation.NSNumber!
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var course: Foundation.NSNumber!
  @objc public var eventSource: Swift.String!
  @objc public var eventType: Swift.String!
  @objc public var eventVersion: Swift.String!
  @objc public var horizontalAccuracy: Foundation.NSNumber!
  @objc public var locationId: Swift.String!
  @objc public var recordedAt: Swift.String!
  @objc public var speed: Foundation.NSNumber!
  @objc public var userId: Swift.String!
  @objc public var verticalAccuracy: Foundation.NSNumber!
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class GeoSparkError : ObjectiveC.NSObject {
  @objc final public let code: Swift.String?
  @objc final public let message: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class GeoSparkTrackingCustomMethodsObjcWrapper : ObjectiveC.NSObject {
  @objc final public let customMethods: GeoSpark.GeoSparkTrackingCustomMethods
  @objc override dynamic public init()
  @objc public func setUpCustomOptions(desiredAccuracy: GeoSpark.LocationAccuracy, useVisit: Swift.Bool, showsBackgroundLocationIndicator: Swift.Bool, distanceFilter: CoreLocation.CLLocationDistance, useSignificant: Swift.Bool, useRegionMonitoring: Swift.Bool, useDynamicGeofencRadius: Swift.Bool, geofenceRadius: Swift.Int, allowBackgroundLocationUpdates: Swift.Bool, activityType: CoreLocation.CLActivityType, pausesLocationUpdatesAutomatically: Swift.Bool, useStandardLocationServices: Swift.Bool, accuracyFilter: Swift.Int, updateInterval: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(HttpLocationData) public class HttpLocationData : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension HttpLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeoSpark.HttpLocationData>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var app_stat: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var bat_saver_mode: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var bat_stat: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var ended_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var gps_stat: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var motion_stat: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var net_stat: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var started_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var timezone_offset: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set(value)
  }
}
@_inheritsConvenienceInitializers @objc(MqttLocationData) public class MqttLocationData : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension MqttLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeoSpark.MqttLocationData>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var app_context: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var app_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var battery_saver: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var device_manufacturer: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var device_model: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var event_listener: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var geofence_events: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_events: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_listener: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var nearby_events: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var os_version: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trips_events: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var tz_offset: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set(value)
  }
}
@_inheritsConvenienceInitializers @objc(MyTrip) public class MyTrip : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension MyTrip {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeoSpark.MyTrip>
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var locationId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var start_time: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var tripId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var update_time: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var route: Foundation.NSSet? {
    @objc get
    @objc set(value)
  }
}
extension MyTrip {
  @objc(addRouteObject:) @NSManaged dynamic public func addToRoute(_ value: GeoSpark.MyTripRoute)
  @objc(removeRouteObject:) @NSManaged dynamic public func removeFromRoute(_ value: GeoSpark.MyTripRoute)
  @objc(addRoute:) @NSManaged dynamic public func addToRoute(_ values: Foundation.NSSet)
  @objc(removeRoute:) @NSManaged dynamic public func removeFromRoute(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(MyTripRoute) public class MyTripRoute : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension MyTripRoute {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeoSpark.MyTripRoute>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var entityId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var tripId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trip: GeoSpark.MyTrip? {
    @objc get
    @objc set(value)
  }
}
@_inheritsConvenienceInitializers @objc(TripEventsLocal) public class TripEventsLocal : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension TripEventsLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeoSpark.TripEventsLocal>
  @objc @NSManaged dynamic public var created_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var entityId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var event_source: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var event_type: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var event_version: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trip: GeoSpark.TripsLocal? {
    @objc get
    @objc set(value)
  }
}
@_inheritsConvenienceInitializers @objc(TripsLocal) public class TripsLocal : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
extension TripsLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeoSpark.TripsLocal>
  @objc @NSManaged dynamic public var created_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var distance_covered: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var is_deleted: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var is_ended: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var is_paused: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var is_started: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var sync_status: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var synced: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trip_ended_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var trip_started_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var updated_at: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var events: Foundation.NSSet? {
    @objc get
    @objc set(value)
  }
}
extension TripsLocal {
  @objc(addEventsObject:) @NSManaged dynamic public func addToEvents(_ value: GeoSpark.TripEventsLocal)
  @objc(removeEventsObject:) @NSManaged dynamic public func removeFromEvents(_ value: GeoSpark.TripEventsLocal)
  @objc(addEvents:) @NSManaged dynamic public func addToEvents(_ values: Foundation.NSSet)
  @objc(removeEvents:) @NSManaged dynamic public func removeFromEvents(_ values: Foundation.NSSet)
}
